import { getToken, login, loginSilent, logout } from "./auth";
import {
  getAdtModels,
  getAdtTwins,
  getTwinIncomingRelationships,
} from "./azure";
import {
  TOKEN_AUDIENCES,
  CLIENT_ID,
  TENANT_ID,
  REDIRECT_URL,
} from "./core/constants";
import { app, BrowserWindow, ipcMain, Menu } from "electron";
import * as fs from "fs";
import isDev from "electron-is-dev";
import aboutWindow from 'about-window';
const openAboutWindow = isDev ? require('aboutWindow').default : aboutWindow;
import path from "path";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isMac = process.platform === "darwin";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

let mainWindow: BrowserWindow;

const createMainWindow = (): void => {
  console.log("Creating main window");
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 768,
    width: 1200,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Menu.setApplicationMenu(null);
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  isDev && mainWindow.webContents.openDevTools();
  const aboutMenu = {
    label: "About",
    click: () => {
      const win = openAboutWindow({
        icon_path: path.join(__dirname, "logo.png"),
        package_json_dir: __dirname,
        product_name: "OPCUA Digital Twins Mapper"
      });
      win.webContents.openDevTools();
    }
  };
  const menu = Menu.buildFromTemplate([
    ...(isMac
      ? [
        {
          label: "OPCUA ADT Mapper",
          submenu: [
            aboutMenu,
            {
              role: "quit" as const,
              label: "Quit",
            },
          ],
        },
        {
          role: "editMenu" as const,
          label: "Edit",
          submenu: [
            {
              label: "Cut",
              accelerator: "CmdOrCtrl+X",
              role: "cut" as const,
            },
            {
              label: "Copy",
              accelerator: "CmdOrCtrl+C",
              role: "copy" as const,
            },
            {
              label: "Paste",
              accelerator: "CmdOrCtrl+V",
              role: "paste" as const,
            },
            {
              label: "Select All",
              accelerator: "CmdOrCtrl+A",
              role: "selectAll" as const,
            },
          ],
        },
        ...(isDev
          ? [{
            role: "viewMenu" as const,
          }]
          : [])
      ]
      : [
        {
          label: "File",
          submenu: [{ role: "quit" as const, label: "Exit" }],
        },
        ...(
          isDev ? [{
            role: "viewMenu" as const,
          }] : []
        ),
        {
          role: "help" as const,
          submenu: [aboutMenu],
        },
      ]),
  ]);
  app.applicationMenu = menu;
};

const createAuthWindow = (): BrowserWindow => {
  return new BrowserWindow({
    height: 600,
    width: 400,
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createMainWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (!isMac) {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
// https://www.sitepoint.com/electron-forge-react-build-secure-desktop-app/
ipcMain.handle("loadFile", async (e, filePath) => {
  if (!fs.existsSync(filePath)) {
    throw new Error("Forbidden");
  }
  return await fs.promises.readFile(filePath, "utf8");
});

ipcMain.handle("isAuthAvailable", () => {
  return !!CLIENT_ID && !!TENANT_ID && !!REDIRECT_URL;
});

ipcMain.handle("signIn", async () => {
  const authWindow = createAuthWindow();
  // mainWindow.setOpacity(1.0);
  const account = await login(authWindow);
  // mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  authWindow.close();
  return account;
});

ipcMain.handle("getToken", async (_, resource) => {
  const token = await getToken(resource);
  return token;
});

ipcMain.handle("getModels", async (_, hostname) => {
  const token = await getToken(TOKEN_AUDIENCES.ADT);
  console.log(token);
  return await getAdtModels(hostname, token as string);
});

ipcMain.handle("getTwins", async (_, hostname, filter?) => {
  const token = await getToken(TOKEN_AUDIENCES.ADT);
  return await getAdtTwins(hostname, token as string, filter);
});

ipcMain.handle("getTwinIncomingRelationships", async (_, hostname, twinId) => {
  const token = await getToken(TOKEN_AUDIENCES.ADT);
  return await getTwinIncomingRelationships(hostname, token as string, twinId);
});

ipcMain.handle("signInSilent", async () => {
  const account = await loginSilent();
  return account;
});

ipcMain.handle("signOut", async () => {
  const authWindow = createAuthWindow();
  if (isDev) {
    authWindow.webContents.openDevTools();
  }
  return await logout(authWindow);
});
